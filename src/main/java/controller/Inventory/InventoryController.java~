package controller.Inventory;

import DBConnection.DBConnection;
import controller.Products.Product;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class InventoryController {

    public List<Inventory> getAllCombinedProductData() {
        List<Inventory> combinedProductDataList = new ArrayList<>();

        String query = "SELECT " +
                "p.ProductID, " +
                "p.Name AS ProductName, " +
                "p.SupplierID, " +
                "c.Name AS CategoryName, " +
                "i.Qty AS QuantityInStock, " +
                "i.LastUpdate AS LastRestockedDate " +
                "FROM Product p " +
                "JOIN Category c ON p.CategoryID = c.CategoryID " +
                "JOIN Inventory i ON p.InventoryID = i.InventoryID " +
                "ORDER BY p.ProductID ASC;";


        try {
            Connection connection = DBConnection.getInstance().getConnection();
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(query);

            while (resultSet.next()) {
                Inventory data = new Inventory(
                        resultSet.getInt("ProductID"),
                        resultSet.getString("ProductName"),
                        resultSet.getInt("SupplierID"),
                        resultSet.getString("CategoryName"),
                        resultSet.getInt("QuantityInStock"),
                        resultSet.getString("LastRestockedDate")
                );
                combinedProductDataList.add(data);
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        return combinedProductDataList;
    }

    public List<Inventory> search(String input) {
        List<Inventory> datalist = new ArrayList<>();


        String query = "SELECT " +
                "p.ProductID, " +
                "p.Name AS ProductName, " +
                "p.SupplierID, " +
                "c.Name AS CategoryName, " +
                "i.Qty AS QuantityInStock, " +
                "i.LastUpdate AS LastRestockedDate " +
                "FROM Product p " +
                "JOIN Category c ON p.CategoryID = c.CategoryID " +
                "JOIN Inventory i ON p.InventoryID = i.InventoryID " +
                "WHERE p.ProductID LIKE ? " +
                "OR p.Name LIKE ? " +
                "OR p.SupplierID LIKE ? " +
                "OR c.Name LIKE ?";

        try {
            Connection connection = DBConnection.getInstance().getConnection();
            PreparedStatement preparedStatement = connection.prepareStatement(query);

            // Setting the search parameter for all columns
            String searchPattern = "%" + input + "%";
            for (int i = 1; i <= 4; i++) {
                preparedStatement.setString(i, searchPattern);
            }

            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                Inventory data = new Inventory(
                        resultSet.getInt("ProductID"),
                        resultSet.getString("ProductName"),
                        resultSet.getInt("SupplierID"),
                        resultSet.getString("CategoryName"),
                        resultSet.getInt("QuantityInStock"),
                        resultSet.getString("LastRestockedDate")
                );
                datalist.add(data);
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        return datalist;
    }

    public void update(int stock, int inventoryID) {


        String query = "UPDATE inventory SET Qty = Qty + ?, LastUpdate = CURRENT_TIMESTAMP WHERE InventoryID = ?";

        try {
            Connection connection = DBConnection.getInstance().getConnection();
            PreparedStatement preparedStatement = connection.prepareStatement(query);

            preparedStatement.setInt(1, stock);
            preparedStatement.setInt(2, inventoryID);
            preparedStatement.executeUpdate();


        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

    }

    private boolean updateInventory(Product product) {
        String inventoryUpdateQuery = "UPDATE Inventory SET Qty = ?, LastUpdate = NOW() WHERE InventoryID = ?";
        try {
            Connection connection = DBConnection.getInstance().getConnection();
            PreparedStatement preparedStatement = connection.prepareStatement(inventoryUpdateQuery);
            preparedStatement.setInt(1, product.getQty());
            preparedStatement.setInt(2, product.getInventoryId());
            return preparedStatement.executeUpdate() > 0;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    private boolean deleteProductfromInventory(int inventoryId) {
        String query = "DELETE FROM Inventory WHERE InventoryID = ?";
        try {
            Connection connection = DBConnection.getInstance().getConnection();
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setInt(1, inventoryId);
            return preparedStatement.executeUpdate() > 0;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public boolean addProductInventory(Product product){
        try {
            String query = "INSERT INTO Inventory (Qty, LastUpdate) VALUES (?, NOW())";
            Connection connection = DBConnection.getInstance().getConnection();

            PreparedStatement preparedStatement = connection.prepareStatement(query);

            preparedStatement.setInt(1, product.getQty());

            return preparedStatement.executeUpdate() > 0;

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

    }

}
